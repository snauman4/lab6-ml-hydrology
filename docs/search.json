[
  {
    "objectID": "lab6.html",
    "href": "lab6.html",
    "title": "Lab 6: Machine Learning in Hydrology",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\nlibrary(powerjoin)\nlibrary(glue)\nlibrary(vip)\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nlibrary(baguette)\nlibrary(ggplot2)\nroot  &lt;- 'https://gdex.ucar.edu/dataset/camels/file'\ndownload.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', \n              'data/camels_attributes_v2.0.pdf')\n\n\n\n\ntypes &lt;- c(\"clim\", \"geol\", \"soil\", \"topo\", \"vege\", \"hydro\")\n\n# Where the files live online ...\nremote_files  &lt;- glue('{root}/camels_{types}.txt')\n# where we want to download the data ...\nlocal_files   &lt;- glue('data/camels_{types}.txt')\n\nwalk2(remote_files, local_files, download.file, quiet = TRUE)\n\n# Read and merge data\ncamels &lt;- map(local_files, read_delim, show_col_types = FALSE) \n\ncamels &lt;- power_full_join(camels ,by = 'gauge_id')"
  },
  {
    "objectID": "lab6.html#data-splitting",
    "href": "lab6.html#data-splitting",
    "title": "Lab 6: Machine Learning in Hydrology",
    "section": "Data Splitting",
    "text": "Data Splitting\n\n# set a new seed for reproducible\nset.seed(123456) # new sequence\n\n# create initial 75% training and 25% testing split and extract the sets\ncamels_strata &lt;- initial_split(camels, prop = .75)\n\ntrain_camels &lt;- training(camels_strata)\ntest_camels &lt;- testing(camels_strata)\n\n# build a 10-fold CV dataset\ncamels_folds &lt;-\n  vfold_cv(train_camels, v = 10)"
  },
  {
    "objectID": "lab6.html#recipe",
    "href": "lab6.html#recipe",
    "title": "Lab 6: Machine Learning in Hydrology",
    "section": "Recipe",
    "text": "Recipe\n\n# define a formula you want to use\nformula &lt;- logQmean ~ p_mean + aridity + high_prec_dur\n\n# build a recipe\ntrain_camels &lt;- na.omit(train_camels)\nrec_camels &lt;-  recipe(logQmean ~ p_mean + aridity + high_prec_dur, data = train_camels) %&gt;%\n  step_log(all_predictors()) %&gt;%\n  step_interact(terms = ~ aridity:p_mean) %&gt;%\n  step_naomit(all_predictors(), all_outcomes()) %&gt;%\n  step_zv(all_predictors()) \n\n# prep the data\nbaked_camels &lt;- prep(rec_camels, train_camels) %&gt;%\n  bake(new_data = NULL)\n\n# check the recipe (should be zero)\nsum(is.na(baked_camels))\n\n[1] 0\n\nsum(is.infinite(as.matrix(baked_camels))) \n\n[1] 0\n\n\n\nThe formula was chose was based on the inclusion of the predictor variables that I believe influence mean daily discharge: p_mean, aridity, and logQmean. Precipitation adds water to the system, while aridity indicates how dry an area is (drier areas usually have lower logQmean). I also expect that more frequent heavy rain events (high_prec_dur) will lead to higher average discharge."
  },
  {
    "objectID": "lab6.html#define-3-models",
    "href": "lab6.html#define-3-models",
    "title": "Lab 6: Machine Learning in Hydrology",
    "section": "Define 3 Models",
    "text": "Define 3 Models\n\n# define a random forest model\nq4_rf_mod &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\") %&gt;%\n  set_mode(\"regression\")\n\n# 2 other models of choice\nq4_xgb_mod &lt;- boost_tree() %&gt;%\n  set_engine(\"xgboost\") %&gt;%\n  set_mode(\"regression\") \n\nq4_lm_mod &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")"
  },
  {
    "objectID": "lab6.html#workflow-set",
    "href": "lab6.html#workflow-set",
    "title": "Lab 6: Machine Learning in Hydrology",
    "section": "Workflow Set",
    "text": "Workflow Set\n\n# create workflow objects, add the recipe, add the models\nq4_rf_wf &lt;- workflow() %&gt;%\n  add_recipe(rec_camels) %&gt;%\n  add_model(q4_rf_mod)\n\nq4_xgb_wf &lt;- workflow() %&gt;%\n  add_recipe(rec_camels) %&gt;%\n  add_model(q4_xgb_mod)\n\nq4_lm_wf &lt;- workflow() %&gt;%\n  add_recipe(rec_camels) %&gt;%\n  add_model(q4_lm_mod) \n\n# fit the model to the resamples\nrf_results &lt;- fit_resamples(q4_rf_wf, resamples = camels_folds)\nxgb_results &lt;- fit_resamples(q4_xgb_wf, resamples = camels_folds) \nlm_results &lt;- fit_resamples(q4_lm_wf, resamples = camels_folds)"
  },
  {
    "objectID": "lab6.html#evaluation",
    "href": "lab6.html#evaluation",
    "title": "Lab 6: Machine Learning in Hydrology",
    "section": "Evaluation",
    "text": "Evaluation\n\n# use autoplot and rank_results to compare the models\nq4_wf &lt;- workflow_set(list(rec_camels), list(q4_rf_mod, q4_xgb_mod, q4_lm_mod)) %&gt;%\n  workflow_map('fit_resamples', resamples = camels_cv)\n\nautoplot(q4_wf)\n\n\n\n\n\n\n\nrank_results(wf, rank_metric = \"rsq\", select_best = TRUE)\n\n# A tibble: 4 × 9\n  wflow_id          .config .metric  mean std_err     n preprocessor model  rank\n  &lt;chr&gt;             &lt;chr&gt;   &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;chr&gt; &lt;int&gt;\n1 recipe_linear_reg Prepro… rmse    0.569  0.0260    10 recipe       line…     1\n2 recipe_linear_reg Prepro… rsq     0.770  0.0223    10 recipe       line…     1\n3 recipe_rand_fore… Prepro… rmse    0.565  0.0249    10 recipe       rand…     2\n4 recipe_rand_fore… Prepro… rsq     0.769  0.0261    10 recipe       rand…     2\n\n\n\nOut of the random forest, linear, and xgboost model, I think that the random forest model is the strongest performer because it shows the lowest RMSE and the highest RSQ compared to the others, capturing the relationship between predictors and response very well. These metrics indicate that the random forest’s predictions are close to the actual values and explain a large variance in the data. This means it consistently makes accurate predictions and captures the underlying patterns in the dataset better than the other models."
  },
  {
    "objectID": "lab6.html#extract-and-evaluate",
    "href": "lab6.html#extract-and-evaluate",
    "title": "Lab 6: Machine Learning in Hydrology",
    "section": "Extract and Evaluate",
    "text": "Extract and Evaluate\n\n# build a workflow with favorite model, recipe, and training data\nfinal_wf &lt;- workflow() %&gt;%\n  add_recipe(rec_camels) %&gt;%\n  add_model(q4_rf_mod) %&gt;%\n  fit(data = train_camels) # use fit to fit all training data to the model\n\n# use augment to make preditions on the test data\nfinal_wf_data &lt;- augment(final_wf, new_data = test_camels)\n\n#create a plot of the observed vs predicted values\nggplot(final_wf_data, aes(x = .pred, y = logQmean, colour = logQmean)) +\n  scale_color_gradient2(low = \"blue3\", mid = \"yellow\", high = \"chartreuse\") +\n  geom_point() +\n  geom_abline(linetype = 2) +\n  labs(title = \"Random Forest Model: Observed vs. Predicted\",\n       x = \"Predicted Log Mean Flow\",\n       y = \"Observed Log Mean Flow?\")\n\n\n\n\n\n\n\n\nThese results suggest that the random forest model performs well on predicting logQmean based on the predictors chosen. Most of the points are along the 1:1 line, indicating that the model’s predicted values match the observed values closely, accurately capturing the relationship between the predictors and logQmean effectively."
  },
  {
    "objectID": "hyperparameter-tuning.html",
    "href": "hyperparameter-tuning.html",
    "title": "Lab 8: Machine Learning in Hydrology",
    "section": "",
    "text": "# loading in the packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\nlibrary(powerjoin)\nlibrary(glue)\nlibrary(vip)\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nlibrary(baguette)\nlibrary(ggplot2)\nlibrary(rsample)\nlibrary(visdat)\nlibrary(ggpubr)\nlibrary(patchwork)\n\n# loading in and merging data\nroot  &lt;- 'https://gdex.ucar.edu/dataset/camels/file'\ndownload.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', \n              'data/camels_attributes_v2.0.pdf')\ntypes &lt;- c(\"clim\", \"geol\", \"soil\", \"topo\", \"vege\", \"hydro\")\n\n# Where the files live online ...\nremote_files  &lt;- glue('{root}/camels_{types}.txt')\n\n# where we want to download the data ...\nlocal_files   &lt;- glue('data/camels_{types}.txt')\nwalk2(remote_files, local_files, download.file, quiet = TRUE)\n\n# Read and merge data\ncamels &lt;- map(local_files, read_delim, show_col_types = FALSE) \ncamels &lt;- power_full_join(camels ,by = 'gauge_id')\n\n# clean the data\nsummary(camels)\n\n   gauge_id             p_mean          pet_mean     p_seasonality     \n Length:671         Min.   :0.6446   Min.   :1.899   Min.   :-1.43546  \n Class :character   1st Qu.:2.3731   1st Qu.:2.335   1st Qu.:-0.26352  \n Mode  :character   Median :3.2295   Median :2.688   Median : 0.08093  \n                    Mean   :3.2577   Mean   :2.787   Mean   :-0.04128  \n                    3rd Qu.:3.7835   3rd Qu.:3.146   3rd Qu.: 0.22399  \n                    Max.   :8.9369   Max.   :4.744   Max.   : 0.92202  \n                                                                       \n   frac_snow          aridity       high_prec_freq  high_prec_dur  \n Min.   :0.00000   Min.   :0.2203   Min.   : 7.90   Min.   :1.075  \n 1st Qu.:0.03514   1st Qu.:0.6957   1st Qu.:18.50   1st Qu.:1.209  \n Median :0.09793   Median :0.8551   Median :22.00   Median :1.282  \n Mean   :0.17760   Mean   :1.0565   Mean   :20.93   Mean   :1.350  \n 3rd Qu.:0.22306   3rd Qu.:1.2673   3rd Qu.:24.23   3rd Qu.:1.440  \n Max.   :0.90633   Max.   :5.2079   Max.   :32.70   Max.   :2.091  \n                                                                   \n high_prec_timing   low_prec_freq    low_prec_dur    low_prec_timing   \n Length:671         Min.   :169.9   Min.   : 2.789   Length:671        \n Class :character   1st Qu.:232.7   1st Qu.: 4.241   Class :character  \n Mode  :character   Median :255.8   Median : 4.950   Mode  :character  \n                    Mean   :254.6   Mean   : 5.954                     \n                    3rd Qu.:278.9   3rd Qu.: 6.702                     \n                    Max.   :348.7   Max.   :36.513                     \n                                                                       \n geol_1st_class     glim_1st_class_frac geol_2nd_class     glim_2nd_class_frac\n Length:671         Min.   :0.2967      Length:671         Min.   :0.000000   \n Class :character   1st Qu.:0.6083      Class :character   1st Qu.:0.002894   \n Mode  :character   Median :0.8294      Mode  :character   Median :0.136540   \n                    Mean   :0.7855                         Mean   :0.155426   \n                    3rd Qu.:0.9971                         3rd Qu.:0.266373   \n                    Max.   :1.0000                         Max.   :0.489930   \n                                                                              \n carbonate_rocks_frac geol_porostiy     geol_permeability soil_depth_pelletier\n Min.   :0.00000      Min.   :0.01000   Min.   :-16.50    Min.   : 0.2667     \n 1st Qu.:0.00000      1st Qu.:0.06767   1st Qu.:-14.77    1st Qu.: 1.0000     \n Median :0.00000      Median :0.13190   Median :-13.96    Median : 1.2283     \n Mean   :0.11874      Mean   :0.12637   Mean   :-13.89    Mean   :10.8728     \n 3rd Qu.:0.04333      3rd Qu.:0.18623   3rd Qu.:-13.00    3rd Qu.:12.8894     \n Max.   :1.00000      Max.   :0.28000   Max.   :-10.90    Max.   :50.0000     \n                      NA's   :3                                               \n soil_depth_statsgo soil_porosity    soil_conductivity max_water_content\n Min.   :0.3999     Min.   :0.3733   Min.   : 0.4469   Min.   :0.0866   \n 1st Qu.:1.1054     1st Qu.:0.4309   1st Qu.: 0.9321   1st Qu.:0.4293   \n Median :1.4577     Median :0.4422   Median : 1.3477   Median :0.5579   \n Mean   :1.2932     Mean   :0.4426   Mean   : 1.7405   Mean   :0.5280   \n 3rd Qu.:1.5000     3rd Qu.:0.4554   3rd Qu.: 1.9323   3rd Qu.:0.6450   \n Max.   :1.5000     Max.   :0.6800   Max.   :13.9557   Max.   :1.0520   \n                                                                        \n   sand_frac        silt_frac        clay_frac        water_frac     \n Min.   : 8.184   Min.   : 2.985   Min.   : 1.846   Min.   : 0.0000  \n 1st Qu.:25.437   1st Qu.:23.947   1st Qu.:13.999   1st Qu.: 0.0000  \n Median :35.269   Median :34.059   Median :18.663   Median : 0.0000  \n Mean   :36.468   Mean   :33.859   Mean   :19.886   Mean   : 0.1017  \n 3rd Qu.:44.457   3rd Qu.:43.639   3rd Qu.:25.420   3rd Qu.: 0.0000  \n Max.   :91.976   Max.   :67.775   Max.   :50.354   Max.   :19.3545  \n                                                                     \n  organic_frac       other_frac       gauge_lat       gauge_lon      \n Min.   : 0.0000   Min.   : 0.000   Min.   :27.05   Min.   :-124.39  \n 1st Qu.: 0.0000   1st Qu.: 0.000   1st Qu.:35.70   1st Qu.:-110.41  \n Median : 0.0000   Median : 1.309   Median :39.25   Median : -92.78  \n Mean   : 0.5918   Mean   : 9.825   Mean   :39.24   Mean   : -95.79  \n 3rd Qu.: 0.0000   3rd Qu.:11.737   3rd Qu.:43.21   3rd Qu.: -81.77  \n Max.   :57.8631   Max.   :99.378   Max.   :48.82   Max.   : -67.94  \n                                                                     \n   elev_mean         slope_mean        area_gages2       area_geospa_fabric\n Min.   :  10.21   Min.   :  0.8222   Min.   :    4.03   Min.   :    4.1   \n 1st Qu.: 249.67   1st Qu.:  7.4268   1st Qu.:  122.28   1st Qu.:  128.0   \n Median : 462.72   Median : 28.8016   Median :  329.68   Median :  340.7   \n Mean   : 759.42   Mean   : 46.1953   Mean   :  792.62   Mean   :  808.1   \n 3rd Qu.: 928.88   3rd Qu.: 73.1695   3rd Qu.:  794.29   3rd Qu.:  804.5   \n Max.   :3571.18   Max.   :255.6884   Max.   :25791.04   Max.   :25817.8   \n                                                                           \n  frac_forest        lai_max          lai_diff         gvf_max      \n Min.   :0.0000   Min.   :0.3671   Min.   :0.1544   Min.   :0.1843  \n 1st Qu.:0.2771   1st Qu.:1.8143   1st Qu.:1.1968   1st Qu.:0.6086  \n Median :0.8137   Median :3.3713   Median :2.3365   Median :0.7803  \n Mean   :0.6395   Mean   :3.2160   Mean   :2.4486   Mean   :0.7221  \n 3rd Qu.:0.9724   3rd Qu.:4.6963   3rd Qu.:3.7574   3rd Qu.:0.8649  \n Max.   :1.0000   Max.   :5.5821   Max.   :4.8315   Max.   :0.9157  \n                                                                    \n    gvf_diff      dom_land_cover_frac dom_land_cover     root_depth_50   \n Min.   :0.0290   Min.   :0.3145      Length:671         Min.   :0.1200  \n 1st Qu.:0.1883   1st Qu.:0.6511      Class :character   1st Qu.:0.1654  \n Median :0.3160   Median :0.8582      Mode  :character   Median :0.1800  \n Mean   :0.3227   Mean   :0.8100                         Mean   :0.1788  \n 3rd Qu.:0.4627   3rd Qu.:0.9967                         3rd Qu.:0.1900  \n Max.   :0.6522   Max.   :1.0000                         Max.   :0.2500  \n                                                         NA's   :24      \n root_depth_99       q_mean          runoff_ratio        slope_fdc     \n Min.   :1.500   Min.   :0.004553   Min.   :0.004238   Min.   :0.0000  \n 1st Qu.:1.522   1st Qu.:0.632918   1st Qu.:0.242443   1st Qu.:0.8978  \n Median :1.800   Median :1.131818   Median :0.350664   Median :1.2829  \n Mean   :1.830   Mean   :1.493967   Mean   :0.387146   Mean   :1.2372  \n 3rd Qu.:2.000   3rd Qu.:1.750901   3rd Qu.:0.506681   3rd Qu.:1.6306  \n Max.   :3.100   Max.   :9.688438   Max.   :1.362132   Max.   :2.4973  \n NA's   :24      NA's   :1          NA's   :1          NA's   :1       \n baseflow_index      stream_elas            q5                q95        \n Min.   :0.006858   Min.   :-0.6363   Min.   :0.000000   Min.   : 0.000  \n 1st Qu.:0.397430   1st Qu.: 1.3177   1st Qu.:0.009155   1st Qu.: 2.066  \n Median :0.504923   Median : 1.7006   Median :0.081568   Median : 3.769  \n Mean   :0.491447   Mean   : 1.8322   Mean   :0.171803   Mean   : 5.057  \n 3rd Qu.:0.600345   3rd Qu.: 2.2255   3rd Qu.:0.219522   3rd Qu.: 6.288  \n Max.   :0.977556   Max.   : 6.2405   Max.   :2.424938   Max.   :31.817  \n                    NA's   :1         NA's   :1          NA's   :1       \n  high_q_freq        high_q_dur       low_q_freq       low_q_dur     \n Min.   :  0.000   Min.   : 0.000   Min.   :  0.00   Min.   :  0.00  \n 1st Qu.:  6.412   1st Qu.: 1.821   1st Qu.: 37.44   1st Qu.: 10.00  \n Median : 15.100   Median : 2.848   Median : 96.00   Median : 15.52  \n Mean   : 25.745   Mean   : 6.913   Mean   :107.62   Mean   : 22.28  \n 3rd Qu.: 35.788   3rd Qu.: 7.554   3rd Qu.:162.14   3rd Qu.: 26.91  \n Max.   :172.800   Max.   :92.559   Max.   :356.80   Max.   :209.88  \n NA's   :1         NA's   :1        NA's   :1        NA's   :1       \n  zero_q_freq         hfd_mean    \n Min.   :0.00000   Min.   :112.2  \n 1st Qu.:0.00000   1st Qu.:160.2  \n Median :0.00000   Median :173.8  \n Mean   :0.03415   Mean   :182.5  \n 3rd Qu.:0.00000   3rd Qu.:204.1  \n Max.   :0.96537   Max.   :287.8  \n NA's   :1         NA's   :1      \n\nls(camels)\n\n [1] \"area_gages2\"          \"area_geospa_fabric\"   \"aridity\"             \n [4] \"baseflow_index\"       \"carbonate_rocks_frac\" \"clay_frac\"           \n [7] \"dom_land_cover\"       \"dom_land_cover_frac\"  \"elev_mean\"           \n[10] \"frac_forest\"          \"frac_snow\"            \"gauge_id\"            \n[13] \"gauge_lat\"            \"gauge_lon\"            \"geol_1st_class\"      \n[16] \"geol_2nd_class\"       \"geol_permeability\"    \"geol_porostiy\"       \n[19] \"glim_1st_class_frac\"  \"glim_2nd_class_frac\"  \"gvf_diff\"            \n[22] \"gvf_max\"              \"hfd_mean\"             \"high_prec_dur\"       \n[25] \"high_prec_freq\"       \"high_prec_timing\"     \"high_q_dur\"          \n[28] \"high_q_freq\"          \"lai_diff\"             \"lai_max\"             \n[31] \"low_prec_dur\"         \"low_prec_freq\"        \"low_prec_timing\"     \n[34] \"low_q_dur\"            \"low_q_freq\"           \"max_water_content\"   \n[37] \"organic_frac\"         \"other_frac\"           \"p_mean\"              \n[40] \"p_seasonality\"        \"pet_mean\"             \"q_mean\"              \n[43] \"q5\"                   \"q95\"                  \"root_depth_50\"       \n[46] \"root_depth_99\"        \"runoff_ratio\"         \"sand_frac\"           \n[49] \"silt_frac\"            \"slope_fdc\"            \"slope_mean\"          \n[52] \"soil_conductivity\"    \"soil_depth_pelletier\" \"soil_depth_statsgo\"  \n[55] \"soil_porosity\"        \"stream_elas\"          \"water_frac\"          \n[58] \"zero_q_freq\"         \n\ncamels &lt;- na.omit(camels)"
  },
  {
    "objectID": "hyperparameter-tuning.html#data-importtidytransform",
    "href": "hyperparameter-tuning.html#data-importtidytransform",
    "title": "Lab 8: Machine Learning in Hydrology",
    "section": "",
    "text": "# loading in the packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.1\n✔ recipes      1.1.0     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\nlibrary(powerjoin)\nlibrary(glue)\nlibrary(vip)\n\n\nAttaching package: 'vip'\n\nThe following object is masked from 'package:utils':\n\n    vi\n\nlibrary(baguette)\nlibrary(ggplot2)\nlibrary(rsample)\nlibrary(visdat)\nlibrary(ggpubr)\nlibrary(patchwork)\n\n# loading in and merging data\nroot  &lt;- 'https://gdex.ucar.edu/dataset/camels/file'\ndownload.file('https://gdex.ucar.edu/dataset/camels/file/camels_attributes_v2.0.pdf', \n              'data/camels_attributes_v2.0.pdf')\ntypes &lt;- c(\"clim\", \"geol\", \"soil\", \"topo\", \"vege\", \"hydro\")\n\n# Where the files live online ...\nremote_files  &lt;- glue('{root}/camels_{types}.txt')\n\n# where we want to download the data ...\nlocal_files   &lt;- glue('data/camels_{types}.txt')\nwalk2(remote_files, local_files, download.file, quiet = TRUE)\n\n# Read and merge data\ncamels &lt;- map(local_files, read_delim, show_col_types = FALSE) \ncamels &lt;- power_full_join(camels ,by = 'gauge_id')\n\n# clean the data\nsummary(camels)\n\n   gauge_id             p_mean          pet_mean     p_seasonality     \n Length:671         Min.   :0.6446   Min.   :1.899   Min.   :-1.43546  \n Class :character   1st Qu.:2.3731   1st Qu.:2.335   1st Qu.:-0.26352  \n Mode  :character   Median :3.2295   Median :2.688   Median : 0.08093  \n                    Mean   :3.2577   Mean   :2.787   Mean   :-0.04128  \n                    3rd Qu.:3.7835   3rd Qu.:3.146   3rd Qu.: 0.22399  \n                    Max.   :8.9369   Max.   :4.744   Max.   : 0.92202  \n                                                                       \n   frac_snow          aridity       high_prec_freq  high_prec_dur  \n Min.   :0.00000   Min.   :0.2203   Min.   : 7.90   Min.   :1.075  \n 1st Qu.:0.03514   1st Qu.:0.6957   1st Qu.:18.50   1st Qu.:1.209  \n Median :0.09793   Median :0.8551   Median :22.00   Median :1.282  \n Mean   :0.17760   Mean   :1.0565   Mean   :20.93   Mean   :1.350  \n 3rd Qu.:0.22306   3rd Qu.:1.2673   3rd Qu.:24.23   3rd Qu.:1.440  \n Max.   :0.90633   Max.   :5.2079   Max.   :32.70   Max.   :2.091  \n                                                                   \n high_prec_timing   low_prec_freq    low_prec_dur    low_prec_timing   \n Length:671         Min.   :169.9   Min.   : 2.789   Length:671        \n Class :character   1st Qu.:232.7   1st Qu.: 4.241   Class :character  \n Mode  :character   Median :255.8   Median : 4.950   Mode  :character  \n                    Mean   :254.6   Mean   : 5.954                     \n                    3rd Qu.:278.9   3rd Qu.: 6.702                     \n                    Max.   :348.7   Max.   :36.513                     \n                                                                       \n geol_1st_class     glim_1st_class_frac geol_2nd_class     glim_2nd_class_frac\n Length:671         Min.   :0.2967      Length:671         Min.   :0.000000   \n Class :character   1st Qu.:0.6083      Class :character   1st Qu.:0.002894   \n Mode  :character   Median :0.8294      Mode  :character   Median :0.136540   \n                    Mean   :0.7855                         Mean   :0.155426   \n                    3rd Qu.:0.9971                         3rd Qu.:0.266373   \n                    Max.   :1.0000                         Max.   :0.489930   \n                                                                              \n carbonate_rocks_frac geol_porostiy     geol_permeability soil_depth_pelletier\n Min.   :0.00000      Min.   :0.01000   Min.   :-16.50    Min.   : 0.2667     \n 1st Qu.:0.00000      1st Qu.:0.06767   1st Qu.:-14.77    1st Qu.: 1.0000     \n Median :0.00000      Median :0.13190   Median :-13.96    Median : 1.2283     \n Mean   :0.11874      Mean   :0.12637   Mean   :-13.89    Mean   :10.8728     \n 3rd Qu.:0.04333      3rd Qu.:0.18623   3rd Qu.:-13.00    3rd Qu.:12.8894     \n Max.   :1.00000      Max.   :0.28000   Max.   :-10.90    Max.   :50.0000     \n                      NA's   :3                                               \n soil_depth_statsgo soil_porosity    soil_conductivity max_water_content\n Min.   :0.3999     Min.   :0.3733   Min.   : 0.4469   Min.   :0.0866   \n 1st Qu.:1.1054     1st Qu.:0.4309   1st Qu.: 0.9321   1st Qu.:0.4293   \n Median :1.4577     Median :0.4422   Median : 1.3477   Median :0.5579   \n Mean   :1.2932     Mean   :0.4426   Mean   : 1.7405   Mean   :0.5280   \n 3rd Qu.:1.5000     3rd Qu.:0.4554   3rd Qu.: 1.9323   3rd Qu.:0.6450   \n Max.   :1.5000     Max.   :0.6800   Max.   :13.9557   Max.   :1.0520   \n                                                                        \n   sand_frac        silt_frac        clay_frac        water_frac     \n Min.   : 8.184   Min.   : 2.985   Min.   : 1.846   Min.   : 0.0000  \n 1st Qu.:25.437   1st Qu.:23.947   1st Qu.:13.999   1st Qu.: 0.0000  \n Median :35.269   Median :34.059   Median :18.663   Median : 0.0000  \n Mean   :36.468   Mean   :33.859   Mean   :19.886   Mean   : 0.1017  \n 3rd Qu.:44.457   3rd Qu.:43.639   3rd Qu.:25.420   3rd Qu.: 0.0000  \n Max.   :91.976   Max.   :67.775   Max.   :50.354   Max.   :19.3545  \n                                                                     \n  organic_frac       other_frac       gauge_lat       gauge_lon      \n Min.   : 0.0000   Min.   : 0.000   Min.   :27.05   Min.   :-124.39  \n 1st Qu.: 0.0000   1st Qu.: 0.000   1st Qu.:35.70   1st Qu.:-110.41  \n Median : 0.0000   Median : 1.309   Median :39.25   Median : -92.78  \n Mean   : 0.5918   Mean   : 9.825   Mean   :39.24   Mean   : -95.79  \n 3rd Qu.: 0.0000   3rd Qu.:11.737   3rd Qu.:43.21   3rd Qu.: -81.77  \n Max.   :57.8631   Max.   :99.378   Max.   :48.82   Max.   : -67.94  \n                                                                     \n   elev_mean         slope_mean        area_gages2       area_geospa_fabric\n Min.   :  10.21   Min.   :  0.8222   Min.   :    4.03   Min.   :    4.1   \n 1st Qu.: 249.67   1st Qu.:  7.4268   1st Qu.:  122.28   1st Qu.:  128.0   \n Median : 462.72   Median : 28.8016   Median :  329.68   Median :  340.7   \n Mean   : 759.42   Mean   : 46.1953   Mean   :  792.62   Mean   :  808.1   \n 3rd Qu.: 928.88   3rd Qu.: 73.1695   3rd Qu.:  794.29   3rd Qu.:  804.5   \n Max.   :3571.18   Max.   :255.6884   Max.   :25791.04   Max.   :25817.8   \n                                                                           \n  frac_forest        lai_max          lai_diff         gvf_max      \n Min.   :0.0000   Min.   :0.3671   Min.   :0.1544   Min.   :0.1843  \n 1st Qu.:0.2771   1st Qu.:1.8143   1st Qu.:1.1968   1st Qu.:0.6086  \n Median :0.8137   Median :3.3713   Median :2.3365   Median :0.7803  \n Mean   :0.6395   Mean   :3.2160   Mean   :2.4486   Mean   :0.7221  \n 3rd Qu.:0.9724   3rd Qu.:4.6963   3rd Qu.:3.7574   3rd Qu.:0.8649  \n Max.   :1.0000   Max.   :5.5821   Max.   :4.8315   Max.   :0.9157  \n                                                                    \n    gvf_diff      dom_land_cover_frac dom_land_cover     root_depth_50   \n Min.   :0.0290   Min.   :0.3145      Length:671         Min.   :0.1200  \n 1st Qu.:0.1883   1st Qu.:0.6511      Class :character   1st Qu.:0.1654  \n Median :0.3160   Median :0.8582      Mode  :character   Median :0.1800  \n Mean   :0.3227   Mean   :0.8100                         Mean   :0.1788  \n 3rd Qu.:0.4627   3rd Qu.:0.9967                         3rd Qu.:0.1900  \n Max.   :0.6522   Max.   :1.0000                         Max.   :0.2500  \n                                                         NA's   :24      \n root_depth_99       q_mean          runoff_ratio        slope_fdc     \n Min.   :1.500   Min.   :0.004553   Min.   :0.004238   Min.   :0.0000  \n 1st Qu.:1.522   1st Qu.:0.632918   1st Qu.:0.242443   1st Qu.:0.8978  \n Median :1.800   Median :1.131818   Median :0.350664   Median :1.2829  \n Mean   :1.830   Mean   :1.493967   Mean   :0.387146   Mean   :1.2372  \n 3rd Qu.:2.000   3rd Qu.:1.750901   3rd Qu.:0.506681   3rd Qu.:1.6306  \n Max.   :3.100   Max.   :9.688438   Max.   :1.362132   Max.   :2.4973  \n NA's   :24      NA's   :1          NA's   :1          NA's   :1       \n baseflow_index      stream_elas            q5                q95        \n Min.   :0.006858   Min.   :-0.6363   Min.   :0.000000   Min.   : 0.000  \n 1st Qu.:0.397430   1st Qu.: 1.3177   1st Qu.:0.009155   1st Qu.: 2.066  \n Median :0.504923   Median : 1.7006   Median :0.081568   Median : 3.769  \n Mean   :0.491447   Mean   : 1.8322   Mean   :0.171803   Mean   : 5.057  \n 3rd Qu.:0.600345   3rd Qu.: 2.2255   3rd Qu.:0.219522   3rd Qu.: 6.288  \n Max.   :0.977556   Max.   : 6.2405   Max.   :2.424938   Max.   :31.817  \n                    NA's   :1         NA's   :1          NA's   :1       \n  high_q_freq        high_q_dur       low_q_freq       low_q_dur     \n Min.   :  0.000   Min.   : 0.000   Min.   :  0.00   Min.   :  0.00  \n 1st Qu.:  6.412   1st Qu.: 1.821   1st Qu.: 37.44   1st Qu.: 10.00  \n Median : 15.100   Median : 2.848   Median : 96.00   Median : 15.52  \n Mean   : 25.745   Mean   : 6.913   Mean   :107.62   Mean   : 22.28  \n 3rd Qu.: 35.788   3rd Qu.: 7.554   3rd Qu.:162.14   3rd Qu.: 26.91  \n Max.   :172.800   Max.   :92.559   Max.   :356.80   Max.   :209.88  \n NA's   :1         NA's   :1        NA's   :1        NA's   :1       \n  zero_q_freq         hfd_mean    \n Min.   :0.00000   Min.   :112.2  \n 1st Qu.:0.00000   1st Qu.:160.2  \n Median :0.00000   Median :173.8  \n Mean   :0.03415   Mean   :182.5  \n 3rd Qu.:0.00000   3rd Qu.:204.1  \n Max.   :0.96537   Max.   :287.8  \n NA's   :1         NA's   :1      \n\nls(camels)\n\n [1] \"area_gages2\"          \"area_geospa_fabric\"   \"aridity\"             \n [4] \"baseflow_index\"       \"carbonate_rocks_frac\" \"clay_frac\"           \n [7] \"dom_land_cover\"       \"dom_land_cover_frac\"  \"elev_mean\"           \n[10] \"frac_forest\"          \"frac_snow\"            \"gauge_id\"            \n[13] \"gauge_lat\"            \"gauge_lon\"            \"geol_1st_class\"      \n[16] \"geol_2nd_class\"       \"geol_permeability\"    \"geol_porostiy\"       \n[19] \"glim_1st_class_frac\"  \"glim_2nd_class_frac\"  \"gvf_diff\"            \n[22] \"gvf_max\"              \"hfd_mean\"             \"high_prec_dur\"       \n[25] \"high_prec_freq\"       \"high_prec_timing\"     \"high_q_dur\"          \n[28] \"high_q_freq\"          \"lai_diff\"             \"lai_max\"             \n[31] \"low_prec_dur\"         \"low_prec_freq\"        \"low_prec_timing\"     \n[34] \"low_q_dur\"            \"low_q_freq\"           \"max_water_content\"   \n[37] \"organic_frac\"         \"other_frac\"           \"p_mean\"              \n[40] \"p_seasonality\"        \"pet_mean\"             \"q_mean\"              \n[43] \"q5\"                   \"q95\"                  \"root_depth_50\"       \n[46] \"root_depth_99\"        \"runoff_ratio\"         \"sand_frac\"           \n[49] \"silt_frac\"            \"slope_fdc\"            \"slope_mean\"          \n[52] \"soil_conductivity\"    \"soil_depth_pelletier\" \"soil_depth_statsgo\"  \n[55] \"soil_porosity\"        \"stream_elas\"          \"water_frac\"          \n[58] \"zero_q_freq\"         \n\ncamels &lt;- na.omit(camels)"
  },
  {
    "objectID": "hyperparameter-tuning.html#data-splitting",
    "href": "hyperparameter-tuning.html#data-splitting",
    "title": "Lab 8: Machine Learning in Hydrology",
    "section": "Data Splitting",
    "text": "Data Splitting\n\n# set seed to ensure random process is reproducable\nset.seed(321)\n\n# split the data\ncamels &lt;- camels %&gt;%\n  mutate(logQmean = log(q_mean))\n\ncamels_split &lt;- initial_split(camels, prop = 0.8)\ncamels_train &lt;- training(camels_split)\ncamels_test &lt;- testing(camels_split)"
  },
  {
    "objectID": "hyperparameter-tuning.html#feature-engineering",
    "href": "hyperparameter-tuning.html#feature-engineering",
    "title": "Lab 8: Machine Learning in Hydrology",
    "section": "Feature Engineering",
    "text": "Feature Engineering\n\n# recipe to predict q_mean from training data\nrec &lt;-  recipe(logQmean ~ aridity + p_mean, data = camels_train) %&gt;%\n  # Log transform the predictor variables (aridity and p_mean)\n  step_log(all_predictors()) %&gt;%\n  # Add an interaction term between aridity and p_mean\n  step_interact(terms = ~ aridity:p_mean) |&gt; \n  # Drop any rows with missing values in the pred\n  step_naomit(all_predictors(), all_outcomes())"
  },
  {
    "objectID": "hyperparameter-tuning.html#resampling-and-model-testing",
    "href": "hyperparameter-tuning.html#resampling-and-model-testing",
    "title": "Lab 8: Machine Learning in Hydrology",
    "section": "Resampling and Model Testing",
    "text": "Resampling and Model Testing\n\n# build resamples\ncamels_cv &lt;- vfold_cv(camels_train, v = 10)\n\n# build 3 candidate models\nxgb_mod &lt;- boost_tree() %&gt;%\n  set_engine(\"xgboost\") %&gt;%\n  set_mode(\"regression\") \n\ndt_mod &lt;- decision_tree() %&gt;%\n  set_engine(\"rpart\") %&gt;%\n  set_mode(\"regression\") \n\nrf_mod &lt;- rand_forest() %&gt;%\n  set_engine(\"ranger\") %&gt;%\n  set_mode(\"regression\")\n\n# test the models\nwf &lt;- workflow_set(list(rec), list(boost = xgb_mod,\n                                   dt = dt_mod,\n                                   ranger = rf_mod)) %&gt;%\n  workflow_map(resamples = camels_cv,\n               metrics = metric_set(mae, rsq, rmse))\n\nautoplot(wf)\n\n\n\n\n\n\n\nrank_results(wf, rank_metric = \"rsq\", select_best = TRUE)\n\n# A tibble: 9 × 9\n  wflow_id      .config     .metric  mean std_err     n preprocessor model  rank\n  &lt;chr&gt;         &lt;chr&gt;       &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt; &lt;chr&gt;        &lt;chr&gt; &lt;int&gt;\n1 recipe_ranger Preprocess… mae     0.371  0.0158    10 recipe       rand…     1\n2 recipe_ranger Preprocess… rmse    0.570  0.0299    10 recipe       rand…     1\n3 recipe_ranger Preprocess… rsq     0.779  0.0250    10 recipe       rand…     1\n4 recipe_dt     Preprocess… mae     0.407  0.0235    10 recipe       deci…     2\n5 recipe_dt     Preprocess… rmse    0.606  0.0365    10 recipe       deci…     2\n6 recipe_dt     Preprocess… rsq     0.756  0.0346    10 recipe       deci…     2\n7 recipe_boost  Preprocess… mae     0.392  0.0141    10 recipe       boos…     3\n8 recipe_boost  Preprocess… rmse    0.620  0.0259    10 recipe       boos…     3\n9 recipe_boost  Preprocess… rsq     0.745  0.0183    10 recipe       boos…     3\n\n# model selection\n\nModel Selection Reasoning: Based on the models chosen and the ranked metrics from the autoplot, the random forest model seems the most fitting due to it having the lowest RMSE, indicating that the model’s predictions are closest to the actual values on average. In addition, from the ranking it is ranked first for mae, rmse, and rsq out of the other metrics.\nSelected Model Description: The random forest model is a “random forest” type, “regression” mode, and the “ranger” engine. I believe this model is best fit for this problem because of its simplicity combined with high predictive accuracy, making it promising for predicting logQmean. In addition, random forest models are known for their robustness against overfitting."
  },
  {
    "objectID": "hyperparameter-tuning.html#model-tuning",
    "href": "hyperparameter-tuning.html#model-tuning",
    "title": "Lab 8: Machine Learning in Hydrology",
    "section": "Model Tuning",
    "text": "Model Tuning\n\n# build a model for your chosen specification\nrf_tune &lt;- rand_forest(trees = tune(), min_n = tune()) %&gt;%\n  set_engine(\"ranger\") %&gt;%\n  set_mode(\"regression\") \n\n# create a workflow\nwf_tune &lt;- workflow(rec,\n                    rand_forest(mode = \"regression\",\n                                engine = \"ranger\",\n                                trees = tune(),\n                                min_n = tune()))\n\nwf_tune = workflow() %&gt;%\n  add_recipe(rec) %&gt;%\n  add_model(rf_tune)\n\n# check the tunable values/ranges\ndials &lt;- extract_parameter_set_dials(wf_tune)\ndials$object\n\n[[1]]\n# Trees (quantitative)\nRange: [1, 2000]\n\n[[2]]\nMinimal Node Size (quantitative)\nRange: [2, 40]\n\n# define the search space\nmy.grid &lt;- dials %&gt;%\n  update(trees = trees(c(1, 2000))) %&gt;%\n  grid_latin_hypercube(size = 25)\n\nWarning: `grid_latin_hypercube()` was deprecated in dials 1.3.0.\nℹ Please use `grid_space_filling()` instead.\n\n# tune the model\nmodel_params &lt;-  tune_grid(\n    wf_tune,\n    resamples = camels_cv,\n    grid = my.grid,\n    metrics = metric_set(rmse, rsq, mae),\n    control = control_grid(save_pred = TRUE)\n  )\n\nautoplot(model_params)\n\n\n\n\n\n\n\n\nModel Tuning Description: From the plot of the model tuning, the first 2 rows show that as minimal node size increases, mae and rmse decreases. In the third row, as minimal node size increases, rsq also increases, indicating a positive relationship. However, it seems that the number of trees does not display any clear pattern nor show a relationship with mae, rmse, or rsq.\n\n# check the skill of the tuned model\n  # collect_metrics\ntree_metrics = metric_set(rsq, rmse, mae)\nhp_best &lt;- select_best(model_params, metric = \"mae\")\nfinalize &lt;- finalize_workflow(wf_tune, hp_best)\nfinal_fit &lt;- last_fit(finalize, camels_split, metrics = tree_metrics)\ncollect_metrics(final_fit)\n\n# A tibble: 3 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rsq     standard       0.753 Preprocessor1_Model1\n2 rmse    standard       0.666 Preprocessor1_Model1\n3 mae     standard       0.422 Preprocessor1_Model1\n\n\nCollect_Metrics Description: From using collect_metrics to check the skill of the final tuned model, mae is the lowest, indicating the smallest average prediction error. The rsq is the highest, showing a strong correlation between the model’s predictions and actual values. Lastly, rmse is moderate, suggesting that the model has an acceptable level of error. Furthermore, these metrics suggest that the model is performing well with a good balance between predictive accuracy and low error.\n\n  # show_best\nshow_best(model_params, metric = \"mae\")\n\n# A tibble: 5 × 8\n  trees min_n .metric .estimator  mean     n std_err .config              \n  &lt;int&gt; &lt;int&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;                \n1  1803    23 mae     standard   0.361    10  0.0163 Preprocessor1_Model17\n2  1422    21 mae     standard   0.361    10  0.0165 Preprocessor1_Model25\n3   829    20 mae     standard   0.361    10  0.0167 Preprocessor1_Model06\n4   461    17 mae     standard   0.361    10  0.0168 Preprocessor1_Model04\n5   928    26 mae     standard   0.361    10  0.0172 Preprocessor1_Model09\n\n\nShow_best Description: From using show_best to show the best performing model based on the mean absolute error, the first row displays that model 17 is the best, with a standard error of 0.016. In addition, model 17 had 1803 trees with a min_n of 23.\n\n  # select_best\nhp_best &lt;- select_best(model_params, metric = \"mae\")\n\n  # finalize your model\nfinal_wf &lt;- finalize_workflow(wf_tune, hp_best)"
  },
  {
    "objectID": "hyperparameter-tuning.html#final-model-verification",
    "href": "hyperparameter-tuning.html#final-model-verification",
    "title": "Lab 8: Machine Learning in Hydrology",
    "section": "Final Model Verification",
    "text": "Final Model Verification\n\n# use last_fit to fit the finalized workflow to the original split\nfinal_fit &lt;- last_fit(finalize, camels_split, metrics = tree_metrics)\n\n# use collect_metrics to check the performance of the final model on the TEST data\ncollect_metrics(final_fit)\n\n# A tibble: 3 × 4\n  .metric .estimator .estimate .config             \n  &lt;chr&gt;   &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 rsq     standard       0.757 Preprocessor1_Model1\n2 rmse    standard       0.660 Preprocessor1_Model1\n3 mae     standard       0.419 Preprocessor1_Model1\n\n\nCollect_metrics Test Interpretation: Test data was slightly better. The final model performs well on the test data, but benchmarks very slightly worse on the test set than on the training set. The model returned similar rsq values on both training and testing (0.7546 vs. 0.7525), which indicates a strong correlation in both cases. However, its rmse was 0.6637 on the training data and 0.6664 on the testing data, so the model for training data is slightly more acccurate. Similarly, the mae rose only from 0.4209 (train) to 0.4220 (test), remaining very low overall.\n\n# use collect_predictions to check the predictions of the final model on the test data\ncollect_predictions(final_fit) %&gt;%\n  ggplot(aes(x = .pred, y = logQmean)) +\n  geom_point() +\n  scale_color_viridis_c() +\n  geom_abline() +\n  geom_smooth(method = \"lm\") +\n  theme_linedraw() +\n  labs(title = \"Final Fit\",\n       x = \"Predicted (log10)\",\n       y = \"Actual (log10)\")\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "hyperparameter-tuning.html#building-a-map",
    "href": "hyperparameter-tuning.html#building-a-map",
    "title": "Lab 8: Machine Learning in Hydrology",
    "section": "Building a Map!",
    "text": "Building a Map!\n\n# pass the final fit to the augment function to make predictions on the full, cleaned data\nfinal_pred = fit(finalize, data = camels) %&gt;%\n  augment(new_data = camels)\n\n# use mutate to calculate the residuals of the predictions (predicted - actual)^2\nresiduals &lt;- final_pred %&gt;%\n  mutate(residual = (.pred - logQmean)^2)\n\n# map predictions\npred_map &lt;- ggplot(data = final_pred, aes(x = gauge_lon, y = gauge_lat)) +\n  borders(\"state\", colour = \"black\") +\n  geom_point(aes(color = .pred), size = 1.5) +\n  scale_color_gradient(low  = \"lightcyan\", \n                       high = \"darkblue\",\n                       name = \"Predicted\\nlogQmean\") +\n  labs(x     = \"Longitude\",\n       y     = \"Latitude\",\n       title = \"Predicted logQmean Across the U.S.\") +\n  ggthemes::theme_map()\n\n# map residuals\nresid_map &lt;- ggplot(data = residuals, aes(x = gauge_lon, y = gauge_lat)) +\n  borders(\"state\", colour = \"black\") +\n  geom_point(aes(color = residual), size = 1.5) +\n  scale_color_gradient(low  = \"mistyrose\", \n                       high = \"darkred\",\n                       name = \"Residuals\") +\n  labs(x     = \"Longitude\",\n       y     = \"Latitude\",\n       title = \"Residuals Across the U.S.\") +\n  ggthemes::theme_map()\n\n# combine the two maps into one figure\ncombined_map &lt;- pred_map + resid_map +\n  plot_annotation(\n    title = \"Predictions Across CONUS\",\n    theme = theme(\n      plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5)\n    )\n  )\nprint(combined_map)"
  }
]